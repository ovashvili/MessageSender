// <auto-generated />
using System;
using MessageSender.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessageSender.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MessageSender.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Config");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<Guid>("Secret")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Secret");

                    b.HasKey("ClientId")
                        .HasName("PK_Client");

                    b.ToTable("Client", (string)null);

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("58165150-b0b2-44c8-88cd-5db0ca565899"),
                            Config = "{\"SmsFrom\": \"OTP\", \"field2\": \"value2\"}",
                            IsActive = true,
                            Secret = new Guid("3dc86176-eac1-4da9-9718-542942bfa82d")
                        },
                        new
                        {
                            ClientId = new Guid("d195a1cf-7de3-4793-a2b2-6a4c9d5fa09b"),
                            Config = "{\"field1\": \"value1\", \"field2\": \"value2\"}",
                            IsActive = false,
                            Secret = new Guid("517104f3-f0c5-4fe7-b75a-76d46f3528e5")
                        });
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Alpha2Code")
                        .HasColumnType("char(2)")
                        .HasColumnName("Alpha2Code");

                    b.Property<short>("DialCode")
                        .HasColumnType("smallint")
                        .HasColumnName("DialCode");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.HasKey("Alpha2Code")
                        .HasName("PK_Country");

                    b.HasIndex("DialCode")
                        .HasDatabaseName("IX_Country_DialCode");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Alpha2Code = "GE",
                            DialCode = (short)995,
                            IsActive = true
                        },
                        new
                        {
                            Alpha2Code = "AM",
                            DialCode = (short)374,
                            IsActive = true
                        },
                        new
                        {
                            Alpha2Code = "US",
                            DialCode = (short)1,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.CountryProvider", b =>
                {
                    b.Property<int>("CountryProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryProviderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryProviderId"));

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("Alpha2Code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<short>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasColumnName("Priority")
                        .HasDefaultValueSql("32767");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderId");

                    b.HasKey("CountryProviderId")
                        .HasName("PK_CountryProvider");

                    b.HasIndex("Alpha2Code")
                        .HasDatabaseName("IX_CountryProvider_Alpha2Code");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("IX_CountryProvider_ProviderId");

                    b.ToTable("CountryProvider", (string)null);

                    b.HasData(
                        new
                        {
                            CountryProviderId = 1,
                            Alpha2Code = "GE",
                            IsActive = true,
                            Priority = (short)1,
                            ProviderId = 1
                        },
                        new
                        {
                            CountryProviderId = 2,
                            Alpha2Code = "GE",
                            IsActive = true,
                            Priority = (short)2,
                            ProviderId = 2
                        },
                        new
                        {
                            CountryProviderId = 3,
                            Alpha2Code = "AM",
                            IsActive = true,
                            Priority = (short)1,
                            ProviderId = 3
                        },
                        new
                        {
                            CountryProviderId = 4,
                            Alpha2Code = "US",
                            IsActive = true,
                            Priority = (short)1,
                            ProviderId = 4
                        });
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.GreyList", b =>
                {
                    b.Property<string>("ContactIdentifier")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ContactIdentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Status")
                        .HasComment("Possible Values:\nBlack\nWhite");

                    b.Property<string>("StatusNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("StatusNote");

                    b.HasKey("ContactIdentifier")
                        .HasName("PK_GreyList");

                    b.ToTable("GreyList", (string)null);

                    b.HasData(
                        new
                        {
                            ContactIdentifier = "555444333",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Black",
                            StatusNote = "Blocked"
                        });
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.MessageDelivery", b =>
                {
                    b.Property<long>("MessageDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MessageDeliveryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageDeliveryId"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderId");

                    b.Property<string>("ProviderMessageId")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ProviderMessageId");

                    b.Property<long?>("SmsId")
                        .HasColumnType("bigint")
                        .HasColumnName("SmsId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Status")
                        .HasComment("Possible Values:\nSendingToProvider\nSuccessFromProvider\nDeliveredToUser\nFailFromProvider\nFail\nUnknown");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("StatusNote");

                    b.HasKey("MessageDeliveryId")
                        .HasName("PK_MessageDelivery");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("IX_MessageDelivery_ProviderId");

                    b.HasIndex("SmsId")
                        .HasDatabaseName("IX_MessageDelivery_SmsId");

                    b.ToTable("MessageDelivery", (string)null);
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProviderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Config");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit")
                        .HasColumnName("IsGlobal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name");

                    b.Property<short>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasColumnName("Priority")
                        .HasDefaultValueSql("32767");

                    b.HasKey("ProviderId")
                        .HasName("PK_Provider");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Provider_Name_UQ");

                    b.ToTable("Provider", (string)null);

                    b.HasData(
                        new
                        {
                            ProviderId = 1,
                            Config = "{\"provider-specific-field\": \"value1\"}",
                            IsActive = true,
                            IsGlobal = false,
                            Name = "Magti",
                            Priority = (short)1
                        },
                        new
                        {
                            ProviderId = 2,
                            Config = "{\"provider-specific-field\": \"value2\"}",
                            IsActive = true,
                            IsGlobal = false,
                            Name = "Silknet",
                            Priority = (short)2
                        },
                        new
                        {
                            ProviderId = 3,
                            Config = "{\"provider-specific-field\": \"value3\"}",
                            IsActive = true,
                            IsGlobal = false,
                            Name = "Peleka",
                            Priority = (short)3
                        },
                        new
                        {
                            ProviderId = 4,
                            Config = "{\"provider-specific-field\": \"value4\"}",
                            IsActive = true,
                            IsGlobal = true,
                            Name = "Nexmo",
                            Priority = (short)1
                        });
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Sms", b =>
                {
                    b.Property<long>("SmsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SmsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SmsId"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("SmsId")
                        .HasName("PK_Sms");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Sms_ClientId");

                    b.ToTable("Sms", (string)null);
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.CountryProvider", b =>
                {
                    b.HasOne("MessageSender.Domain.Entities.Country", "Country")
                        .WithMany("CountryProviders")
                        .HasForeignKey("Alpha2Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryProvider_Country_Alpha2Code");

                    b.HasOne("MessageSender.Domain.Entities.Provider", "Provider")
                        .WithMany("CountryProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryProvider_Provider_ProviderId");

                    b.Navigation("Country");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.MessageDelivery", b =>
                {
                    b.HasOne("MessageSender.Domain.Entities.Provider", "Provider")
                        .WithMany("MessageDeliveries")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_MessageDelivery_Provider_ProviderId");

                    b.HasOne("MessageSender.Domain.Entities.Sms", "Sms")
                        .WithMany("MessageDeliveries")
                        .HasForeignKey("SmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MessageDelivery_Sms_SmsId");

                    b.Navigation("Provider");

                    b.Navigation("Sms");
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Sms", b =>
                {
                    b.HasOne("MessageSender.Domain.Entities.Client", "Client")
                        .WithMany("Smses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sms_Client_ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Client", b =>
                {
                    b.Navigation("Smses");
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Country", b =>
                {
                    b.Navigation("CountryProviders");
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Provider", b =>
                {
                    b.Navigation("CountryProviders");

                    b.Navigation("MessageDeliveries");
                });

            modelBuilder.Entity("MessageSender.Domain.Entities.Sms", b =>
                {
                    b.Navigation("MessageDeliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
